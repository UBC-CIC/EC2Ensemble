AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'CloudFormation Template for instantiating Jacktrip servers in AWS'

Parameters:
  S3KeyPrefix:
    Type: String
    Default: jacktrip

  JacktripCodeBucketCentral:
    Type: AWS::SSM::Parameter::Value<String>
    Default: JacktripCentralCodeBucketSSM

Globals:
  Function:
    Runtime: nodejs14.x

# Parameters:
# JacktripEventSource:
#   Description: 'Event source name for the web portal'
#   Type: String
#   Default: 'web_portal'

# JacktripEventDetailType:
#   Description: 'Detail type for Jacktrip events'
#   Type: String
#   Default: 'Jacktrip Server Event Notification'

Resources:
  # Lambdas
  JacktripCreateServer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend
      Handler: functions/createServer.handler

  JacktripTerminateServer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend
      Handler: functions/terminateServer.handler

  SqsConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend
      Handler: functions/sqsConsumer.handler
      Environment:
        Variables:
          stateMachineArn: !Ref JacktripStateMachine

  JacktripCodeBucketRegional:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub jacktrip-code-bucket-${AWS::Region}

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref JacktripCodeBucketRegional
      SourceBucket: jacktrip-code-bucket-central
      Prefix: jacktrip-
      Objects:
        - functions/packages/MyFunction/lambda.zip
  # EventBridge
  # JacktripBus:
  #   Type: AWS::Events::EventBus
  #   Properties:
  #     Name: !Sub 'JacktripEventBus-${AWS::Region}'

  # JacktripBusPolicy:
  #   Type: AWS::Events::EventBusPolicy
  #   Properties:
  #     StatementId: !Sub '${JacktripBus}-Policy'
  #     Action: events:PutEvents
  #     Principal: !Ref AWS::AccountId
  #     EventBusName: !Ref JacktripBus

  # RegionalEventRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description: 'Rule in each region matching Jacktrip events'
  #     EventPattern:
  #       source:
  #         - !Ref JacktripEventSource
  #       detail-type:
  #         - !Ref JacktripEventDetailType
  #       detail:
  #         region:
  #           - !Ref AWS::Region
  #     EventBusName: !Ref JacktripBus
  #     Targets:
  #       - Arn: !Ref JacktripStateMachine
  #         Id: 'JacktripStateMachine'
  #         InputPath: $.detail
  #         RoleArn: '{{resolve:ssm:JacktripEventRuleRole}}'

  # SNS Subscription and SQS
  JacktripSqsSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: '{{resolve:ssm:JacktripSnsTopic}}'
      Protocol: sqs
      Endpoint: !GetAtt JacktripSqsQueue.Arn
      Region: '{{resolve:ssm:JacktripCentralRegion}}'
      FilterPolicy:
        region:
          - !Ref AWS::Region

  JacktripSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true

  # Step Functions
  JacktripStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ./backend/state_machine/state_machine.asl.json
      DefinitionSubstitutions:
        CreateServerFunctionArn: !GetAtt JacktripCreateServer.Arn
        TerminateServerFunctionArn: !GetAtt JacktripTerminateServer.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
      Role: '{{resolve:ssm:JacktripStateMachineRole}}'
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'Jacktrip-StateMachine-LogGroup-${AWS::Region}'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt CopyZipsRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${JacktripCodeBucketCentral}/${S3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${JacktripCodeBucketRegional}/${S3KeyPrefix}*'
