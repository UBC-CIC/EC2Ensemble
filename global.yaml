AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template for Global resources

Globals:
  Function:
    Runtime: nodejs14.x
  Api:
    Cors:
      AllowHeaders: "'Content-Type, X-Amz-Date, Authorization, X-Api-Key, X-Amz-Security-Token, X-Amz-User-Agent'"
      AllowOrigin: !Join ['', ["'", !Ref WebAppUrl, "'"]]
      AllowMethods: "'OPTIONS, POST, GET, DELETE, PUT'"
      AllowCredentials: true
    Auth:
      AddDefaultAuthorizerToCorsPreflight: False
      DefaultAuthorizer: JacktripGlobalCognitoAuthorizer
      Authorizers:
        JacktripGlobalCognitoAuthorizer:
          UserPoolArn:
            - !GetAtt UserPool.Arn

Parameters:
  WebAppUrl:
    Type: String
    Default: '*'
  ExecutionRoleName:
    Type: String
    Default: AWSCloudFormationStackSetExecutionRole
  # StackSetTemplateUrl:
  #   Type: String
  DeployedRegion:
    Type: CommaDelimitedList
    Default: ca-central-1, us-west-2

Resources:
  ApiGatewayAccountSettings:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLogRole.Arn

  # Cognito Roles
  # BEGIN USER POOL RESOURCES
  UserPool:
    # Created upon user selection
    Type: AWS::Cognito::UserPool
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: !Join ['', [!Ref 'AWS::StackName', '-', 'cognito-userpool']]
      UsernameConfiguration:
        CaseSensitive: false
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: family_name
          Required: true
          Mutable: true
        - Name: given_name
          Required: true
          Mutable: true
      AutoVerifiedAttributes:
        - email
      EmailVerificationSubject: 'Your verification code for EC2Ensemble'
      EmailVerificationMessage: 'Your verification code is {####}'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        - email
      MfaConfiguration: 'OFF'

  UserPoolClientWeb:
    # Created provide application access to user pool
    # Depends on UserPool for ID reference
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: cognito_app_clientWeb

      ReadAttributes: ['email', 'family_name', 'given_name']
      WriteAttributes: ['email', 'family_name', 'given_name']

      RefreshTokenValidity: 30
      UserPoolId: !Ref UserPool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName:
        !Join ['', [!Ref 'AWS::StackName', '-', 'cognito-identitypool']]
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClientWeb
          ProviderName: !GetAtt UserPool.ProviderName
      AllowUnauthenticatedIdentities: true
  # Create a role for unauthorized access to ddb scan.
  CognitoUnAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: 'CognitoUnauthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Scan'
                Resource: !GetAtt UserServerTable.Arn
  # Create a role for authorized access to AWS resources.
  CognitoAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
  IdentityPoolRoleMap:
    # Created to map Auth and Unauth roles to the identity pool
    # Depends on Identity Pool for ID ref
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn
        authenticated: !GetAtt CognitoAuthorizedRole.Arn

  # Lambdas
  ActionHandlerLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/global/actionHandler
      Handler: actionHandler.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /actions
            RequestParameters:
              - method.request.header.Authorization:
                  Required: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserServerTable
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt StateMachine.Name
      Environment:
        Variables:
          userServerTableName: !Ref UserServerTable
          corsOriginUrl: !Ref WebAppUrl
          stateMachineArn: !Ref StateMachine

  GetUserServerLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/global/getUserServer
      Handler: getUserServer.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: get
            Path: /user
            RequestParameters:
              - method.request.querystring.user:
                  Required: true
              - method.request.header.Authorization:
                  Required: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserServerTable
      Environment:
        Variables:
          userServerTableName: !Ref UserServerTable
          corsOriginUrl: !Ref WebAppUrl

  DeleteRoomLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/global/deleteRoom
      Handler: deleteRoom.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: delete
            Path: /user/{user}/room/{serverId}
            RequestParameters:
              - method.request.path.user:
                  Required: true
              - method.request.path.serverId:
                  Required: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserServerTable
      Environment:
        Variables:
          userServerTableName: !Ref UserServerTable
          corsOriginUrl: !Ref WebAppUrl

  CreateExternalRoomLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/global/createExternalRoom
      Handler: createExternalRoom.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: post
            Path: /external
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserServerTable
      Environment:
        Variables:
          userServerTableName: !Ref UserServerTable
          corsOriginUrl: !Ref WebAppUrl

  UpdateExternalRoomLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/global/updateExternalRoom
      Handler: updateExternalRoom.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: put
            Path: /user/{user}/external/{serverId}
            RequestParameters:
              - method.request.path.user:
                  Required: true
              - method.request.path.serverId:
                  Required: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserServerTable
      Environment:
        Variables:
          userServerTableName: !Ref UserServerTable
          corsOriginUrl: !Ref WebAppUrl

  # Lambdas (Step Functions)
  CreateServerLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/createServer
      Handler: createServer.handler
      Timeout: 10
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:RunInstances
                - ec2:CreateTags
                - ssm:GetParameter
              Resource: '*'
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
      Environment:
        Variables:
          instanceProfileName: !Ref EC2InstanceProfile
          stackName: !Ref AWS::StackName

  TerminateServerLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/terminateServer
      Handler: terminateServer.handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:TerminateInstances
              Resource: '*'

  GetServerStatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/getServerStatus
      Handler: getServerStatus.handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
              Resource: '*'
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess

  HandleFailLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/handleFail
      Handler: handleFail.handler
      Environment:
        Variables:
          userServerTableName: !Ref UserServerTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !GetAtt UserServerTable.Arn

  HandleSuccessLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/handleSuccess
      Handler: handleSuccess.handler
      Environment:
        Variables:
          userServerTableName: !Ref UserServerTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !GetAtt UserServerTable.Arn

  RunJacktripLambda:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 120
      CodeUri: ./backend/functions/regional/runJacktrip
      Handler: runJacktrip.handler
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Environment:
        Variables:
          userServerTableName: !Ref UserServerTable
          stackName: !Ref AWS::StackName

  ContactWebSocketLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/contactWebSocket
      Handler: contactWebSocket.handler
      Environment:
        Variables:
          connectionTableName: !Ref WebSocketConnectionsTable
          apiEndpoint: !Sub '${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${WebSocketConnectionsTable}/*'

  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ./backend/state_machine/state_machine.asl.json
      DefinitionSubstitutions:
        CreateServerFunctionArn: !GetAtt CreateServerLambda.Arn
        TerminateServerFunctionArn: !GetAtt TerminateServerLambda.Arn
        GetServerStatusFunctionArn: !GetAtt GetServerStatusLambda.Arn
        HandleFailFunctionArn: !GetAtt HandleFailLambda.Arn
        HandleSuccessFunctionArn: !GetAtt HandleSuccessLambda.Arn
        ContactWebSocketFunctionArn: !GetAtt ContactWebSocketLambda.Arn
        RunJacktripFunctionArn: !GetAtt RunJacktripLambda.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
      Role: !GetAtt StateMachineRole.Arn
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-StateMachineLogGroup'
      RetentionInDays: 30

  # DynamoDB
  UserServerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user
          AttributeType: S
        - AttributeName: serverId
          AttributeType: S
      KeySchema:
        - AttributeName: user
          KeyType: HASH
        - AttributeName: serverId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user
          AttributeType: S
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: user
              KeyType: HASH
            - AttributeName: connectionId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true

  # Websocket authorizer with Lambda function
  # https://github.com/aws-samples/simple-websockets-chat-app/issues/22
  WebSocketAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref WebSocketApi
      AuthorizerType: REQUEST
      Name: WebSocketAuthorizer
      # https://medium.com/swlh/implementing-secure-web-sockets-with-aws-api-gateway-cognito-dynamodb-and-lambda-b38e02314b42
      # Web Browser’s WebSocket object does not allow you to send any custom header
      IdentitySource:
        - 'route.request.querystring.Authorization'
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketAuthorizerFunction.Arn}/invocations'
  WebSocketAuthorizerFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-websocketAuthorizer-function'
      CodeUri: ./backend/functions/global/websocketAuthorizer
      Handler: websocketAuthorizer.handler
      Environment:
        Variables:
          aud: !Ref UserPoolClientWeb
          userPoolId: !Ref UserPool
          region: !Ref AWS::Region
  WebSocketAuthorizerFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref WebSocketAuthorizerFunction
      Principal: apigateway.amazonaws.com

  # Websocket API - heavily inspired from https://serverlessland.com/patterns/apigw-websocket-api-lambda
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${AWS::StackName}-websocket-api'
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.route'
  # https://currentlyunnamed-theclassic.blogspot.com/2018/12/mastering-cloudformation-for-api.html
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - OnConnectRoute
      - OnDisconnectRoute
      - OnHeartbeatRoute
    Properties:
      ApiId: !Ref WebSocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn:
      - ApiGatewayAccountSettings
    Properties:
      StageName: dev
      Description: Dev Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketApi
      DefaultRouteSettings:
        LoggingLevel: INFO

  # WebSocket Connect
  WebSocketOnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-onConnect-function'
      CodeUri: ./backend/functions/global/onConnect
      Handler: onConnect.handler
      Environment:
        Variables:
          connectionTableName: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
  OnConnectFunctionResourcePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref WebSocketOnConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
  OnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: OnConnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketOnConnectFunction.Arn}/invocations
  OnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebSocketAuthorizer
      OperationName: OnConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref OnConnectIntegration

  # WebSocket Disconnect
  WebSocketOnDisconnectFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-onDisconnect-function'
      CodeUri: ./backend/functions/global/onDisconnect
      Handler: onDisconnect.handler
      Environment:
        Variables:
          connectionTableName: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
  OnDisconnectFunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref WebSocketOnDisconnectFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
  OnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: OnDisconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketOnDisconnectFunction.Arn}/invocations
  OnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      # AuthorizationType: NONE
      OperationName: OnDisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref OnDisconnectIntegration

  # WebSocket Heartbeat
  WebSocketOnHeartbeatFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-onHeartbeat-function'
      CodeUri: ./backend/functions/global/onHeartbeat
      Handler: onHeartbeat.handler
      Environment:
        Variables:
          connectionTableName: !Ref WebSocketConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
  OnHeartbeatFunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref WebSocketOnHeartbeatFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
  OnHeartbeatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: OnHeartbeat Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketOnHeartbeatFunction.Arn}/invocations
  OnHeartbeatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: heartbeat
      # AuthorizationType: NONE
      OperationName: OnHeartbeatRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref OnHeartbeatIntegration

  # IAM Roles
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role used by the Step Functions State Machine
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-StateMachineInvokeLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - Fn::Sub: arn:*:lambda:*:${AWS::AccountId}:function:*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  ApiGatewayLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ContactWebsocketLambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource:
                  - Fn::Sub: arn:*:lambda:*:${AWS::AccountId}:function:*
        - PolicyName: Ec2DescribeTags
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeTags
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-EC2InstanceProfile
      Path: /
      Roles:
        - !Ref EC2InstanceRole

  JacktripRegionalStackSet:
    Type: 'AWS::CloudFormation::StackSet'
    Properties:
      StackSetName: !Sub ${AWS::StackName}-RegionalStackSet
      ExecutionRoleName: !Ref ExecutionRoleName
      PermissionModel: SELF_MANAGED
      # TemplateURL: !Ref StackSetTemplateUrl
      Capabilities:
        - CAPABILITY_NAMED_IAM
        - CAPABILITY_AUTO_EXPAND
      Parameters:
        - ParameterKey: CentralRegion
          ParameterValue: !Ref AWS::Region
        - ParameterKey: ParentStackName
          ParameterValue: !Ref AWS::StackName
      StackInstancesGroup:
        - Regions: !Ref DeployedRegion
          DeploymentTargets:
            Accounts:
              - !Ref AWS::AccountId
      TemplateBody: |
        AWSTemplateFormatVersion: '2010-09-09'
        Transform: AWS::Serverless-2016-10-31
        Description: 'CloudFormation Template for instantiating Jacktrip servers in AWS'

        Globals:
          Function:
            Runtime: nodejs14.x

        Parameters:
          CentralRegion:
            Type: String
          ParentStackName:
            Type: String

        Resources:
          EC2SecurityGroup:
            Type: AWS::EC2::SecurityGroup
            Properties:
              GroupDescription: Security Group for all EC2 instances running Jacktrip (see Network Ports at https://ccrma.stanford.edu/docs/common/IETF.html)
              VpcId: !Ref RegionalVpc
              SecurityGroupIngress:
                - IpProtocol: udp
                  Description: Allows udp connection to port 61002 to 62000 (Jacktrip Hub mode)
                  FromPort: 61002
                  ToPort: 62000
                  CidrIp: 0.0.0.0/0
                - IpProtocol: udp
                  Description: Allows udp ingress to port 4464 (Jacktrip P2P mode)
                  FromPort: 4464
                  ToPort: 4464
                  CidrIp: 0.0.0.0/0
                - IpProtocol: tcp
                  Description: Allows tcp ingress on port 4464 for client handshake (Jacktrip Hub mode)
                  FromPort: 4464
                  ToPort: 4464
                  CidrIp: 0.0.0.0/0
              SecurityGroupEgress:
                - Description: Allow all outbound traffic
                  IpProtocol: '-1'
                  CidrIp: 0.0.0.0/0

          RegionalVpc:
            Type: AWS::EC2::VPC
            Properties:
              CidrBlock: 172.18.0.0/16
              EnableDnsSupport: true
              EnableDnsHostnames: true
              Tags:
                - Key: Name
                  Value: !Join ['', [!Ref 'AWS::StackName', '-VPC']]

          InternetGateway:
            Type: AWS::EC2::InternetGateway
            DependsOn: RegionalVpc

          AttachGateway:
            Type: AWS::EC2::VPCGatewayAttachment
            Properties:
              VpcId: !Ref RegionalVpc
              InternetGatewayId: !Ref InternetGateway

          PublicSubnet:
            Type: AWS::EC2::Subnet
            Properties:
              CidrBlock: !GetAtt RegionalVpc.CidrBlock
              VpcId: !Ref RegionalVpc
              AvailabilityZone: !Select [0, !GetAZs '']
              MapPublicIpOnLaunch: true
              Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-PublicSubnet

          PublicRouteTable:
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref RegionalVpc

          PublicRoute: # Public route table has direct routing to IGW:
            Type: AWS::EC2::Route
            DependsOn: AttachGateway
            Properties:
              RouteTableId: !Ref PublicRouteTable
              DestinationCidrBlock: 0.0.0.0/0
              GatewayId: !Ref InternetGateway

          PublicSubnetRouteTableAssociation:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
              RouteTableId: !Ref PublicRouteTable
              SubnetId: !Ref PublicSubnet

          RunJacktripDocument:
            Type: AWS::SSM::Document
            Properties:
              Content:
                schemaVersion: '2.2'
                description: 'Run Jacktrip on EC2 instance'
                parameters:
                  samplingRate:
                    type: String
                    description: 'Sampling rate parameter for Jacktrip (Required)'
                  bufferSize:
                    type: String
                    description: 'Buffer size parameter for Jacktrip (Required)'
                mainSteps:
                  - action: aws:runShellScript
                    name: runCommands
                    inputs:
                      runCommand:
                        - 'killall jackd && killall jacktrip'
                        - 'jackd -R -t500 -ddummy -r{{samplingRate}} -p{{bufferSize}} &'
                        - 'cd /home/ubuntu'
                        - './jacktrip -S &'
                        - 'echo "Run Jacktrip Successful"'
              DocumentType: Command

          # SSM Parameter
          SubnetIdSSM:
            Type: AWS::SSM::Parameter
            Properties:
              Name: !Sub /${ParentStackName}/SubnetId
              Type: String
              Value: !Ref PublicSubnet

          SecurityGroupIdSSM:
            Type: AWS::SSM::Parameter
            Properties:
              Name: !Sub /${ParentStackName}/JacktripSecurityGroupId
              Type: String
              Value: !Ref EC2SecurityGroup

          DocumentNameSSM:
            Type: AWS::SSM::Parameter
            Properties:
              Name: !Sub /${ParentStackName}/JacktripDocumentName
              Type: String
              Value: !Ref RunJacktripDocument

          JacktripCentralRegion:
            Type: AWS::SSM::Parameter
            Properties:
              Name: !Sub /${ParentStackName}/CentralRegion
              Type: String
              Value: !Ref CentralRegion
        # END of regional.yaml

  # SSM Parameter
  SSMParamUserServerTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /amplify/${AWS::StackName}/UserServerTableName
      Type: String
      Value: !Ref UserServerTable
  SSMParamUserPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /amplify/${AWS::StackName}/Cognito-UserPoolId
      Type: String
      Value: !Ref UserPool
  SSMParamUserPoolClientWebId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /amplify/${AWS::StackName}/Cognito-UserPoolClientWebId
      Type: String
      Value: !Ref UserPoolClientWeb
  SSMParamIdentityPoolId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /amplify/${AWS::StackName}/Cognito-IdentityPoolId
      Type: String
      Value: !Ref IdentityPool
  SSMParamWebSocketURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /amplify/${AWS::StackName}/WebSocketURL
      Type: String
      Value:
        !Join [
          '',
          [
            'wss://',
            !Ref WebSocketApi,
            '.execute-api.',
            !Ref 'AWS::Region',
            '.amazonaws.com/',
            !Ref 'Stage',
          ],
        ]
  SSMParamActionHandlerURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /amplify/${AWS::StackName}/ActionHandlerURL
      Type: String
      Value:
        !Join [
          '',
          [
            'https://',
            !Ref ServerlessRestApi,
            '.execute-api.',
            !Ref 'AWS::Region',
            '.amazonaws.com/',
            Prod,
          ],
        ]
  SSMDeployedRegion:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /amplify/${AWS::StackName}/RegionSelection
      Type: StringList
      Value: !Join [',', !Ref DeployedRegion]

  ContactWebsocketLambdaSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${AWS::StackName}/ContactWebSocketFunctionName
      Type: String
      Value: !Ref ContactWebSocketLambda

Outputs:
  StateMachineRoleArn:
    Description: Arn for the Jacktrip State Machine
    Value: !GetAtt StateMachineRole.Arn
  WebSocketURL:
    Description: 'The WSS Protocol URL to connect to'
    Value:
      !Join [
        '',
        [
          'wss://',
          !Ref WebSocketApi,
          '.execute-api.',
          !Ref 'AWS::Region',
          '.amazonaws.com/',
          !Ref 'Stage',
        ],
      ]
