AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'CloudFormation Template for instantiating Jacktrip servers in AWS'

Globals:
  Function:
    Runtime: nodejs14.x
Parameters:
  CentralRegion:
    Type: String
    Default: ca-central-1
  UserServerTableName:
    Type: String
    Default: jacktrip-global-UserServerTable-1CV4VPDXSCTB2
  WebSocketTableName:
    Type: String
    Default: jacktrip-global-WebSocketConnectionsTable-1CRP9NJGFPHVC
  WebSocketApiId:
    Type: String
    Default: 30yypq5gz0

Resources:
  # Lambdas
  JacktripCreateServer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/createServer
      Handler: createServer.handler
      Timeout: 10
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:RunInstances
                - ec2:CreateTags
                - iam:PassRole
              Resource: '*'
      Environment:
        Variables:
          ec2SecurityGroup: !Ref JacktripEC2SecurityGroup

  JacktripTerminateServer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/terminateServer
      Handler: terminateServer.handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:TerminateInstances
              Resource: '*'

  GetServerStatus:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/getServerStatus
      Handler: getServerStatus.handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:DescribeInstances
              Resource: '*'
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess

  HandleFail:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/handleFail
      Handler: handleFail.handler
      Environment:
        Variables:
          centralRegion: !Ref CentralRegion
          userServerTableName: !Ref UserServerTableName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !Sub 'arn:${AWS::Partition}:dynamodb:${CentralRegion}:${AWS::AccountId}:table/${UserServerTableName}'

  HandleSuccess:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/handleSuccess
      Handler: handleSuccess.handler
      Environment:
        Variables:
          centralRegion: !Ref CentralRegion
          userServerTableName: !Ref UserServerTableName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !Sub 'arn:${AWS::Partition}:dynamodb:${CentralRegion}:${AWS::AccountId}:table/${UserServerTableName}'

  RunJacktripFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 120
      CodeUri: ./backend/functions/regional/runJacktrip
      Handler: runJacktrip.handler
      Environment:
        Variables:
          commandName: !Ref RunJacktripDocument
      Policies:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess

  ContactWebSocket:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/contactWebSocket
      Handler: contactWebSocket.handler
      Environment:
        Variables:
          connectionTableName: !Ref WebSocketTableName
          centralRegion: !Ref CentralRegion
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${CentralRegion}:${AWS::AccountId}:${WebSocketApiId}/*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: !Sub 'arn:${AWS::Partition}:dynamodb:${CentralRegion}:${AWS::AccountId}:table/${WebSocketTableName}/*'

  SqsConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/functions/regional/sqsConsumer
      Handler: sqsConsumer.handler
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Enabled: true
            Queue: !GetAtt JacktripSqsQueue.Arn
          BatchSize: 5
      Environment:
        Variables:
          stateMachineArn: !Ref JacktripStateMachine
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt JacktripStateMachine.Name

  JacktripEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for all EC2 instances running Jacktrip
      GroupName: JacktripEC2SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  # SNS Subscription and SQS
  JacktripSqsSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Sub arn:aws:sns:${CentralRegion}:173513177120:JacktripSnsTopic.fifo
      Protocol: sqs
      Endpoint: !GetAtt JacktripSqsQueue.Arn
      Region: !Ref CentralRegion
      FilterPolicy:
        region:
          - !Ref AWS::Region

  JacktripSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: JacktripQueue.fifo

  JacktripSqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref JacktripSqsQueue
      PolicyDocument: # include in JSON format
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Principal:
              Service: sns.amazonaws.com
            Resource: !GetAtt JacktripSqsQueue.Arn

  # Step Functions
  JacktripStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ./backend/state_machine/state_machine.asl.json
      DefinitionSubstitutions:
        CreateServerFunctionArn: !GetAtt JacktripCreateServer.Arn
        TerminateServerFunctionArn: !GetAtt JacktripTerminateServer.Arn
        GetServerStatusFunctionArn: !GetAtt GetServerStatus.Arn
        HandleFailFunctionArn: !GetAtt HandleFail.Arn
        HandleSuccessFunctionArn: !GetAtt HandleSuccess.Arn
        ContactWebSocketFunctionArn: !GetAtt ContactWebSocket.Arn
        RunJacktripFunctionArn: !GetAtt RunJacktripFunction.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StateMachineLogGroup.Arn
      Role: arn:aws:iam::173513177120:role/JacktripStateMachineRole
  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'Jacktrip-StateMachine-LogGroup-${AWS::Region}'

  RunJacktripDocument:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 'Run Jacktrip on EC2 instance'
        parameters:
          samplingRate:
            type: String
            description: 'Sampling rate parameter for Jacktrip (Required)'
          bufferSize:
            type: String
            description: 'Buffer size parameter for Jacktrip (Required)'
        mainSteps:
          - action: aws:runShellScript
            name: runCommands
            inputs:
              runCommand:
                - 'killall jackd && killall jacktrip'
                - 'jackd -R -t500 -ddummy -r{{samplingRate}} -p{{bufferSize}} &'
                - 'cd /home/ubuntu'
                - './jacktrip -S &'
                - 'echo "Run Jacktrip Successfull"'
      DocumentType: Command
